/*
Rotate an array of n elements to the right by k steps.
For example, with n = 7 and k = 3, the array [1,2,3,4,5,6,7] is rotated to [5,6,7,1,2,3,4].
SOLUTION USED: https://www.programcreek.com/2015/03/rotate-array-in-java/  */

class Solution {
    public void rotate(int[] nums, int k) {
       if (nums == null || nums.length==0 || k < 0 ) { throw new IllegalArgumentException("Illegal Argument!");}
        if(k > nums.length){
            k = k %nums.length;
        }
        
        //Length of first part
        int a = nums.length - k;
        reverse(nums, 0 , a-1);
        reverse(nums, a, nums.length-1);
        reverse(nums, 0, nums.length-1);
    }
    
    public static void reverse(int[] nums, int left, int right){
        if(nums == null || nums.length == 1){return;}
        while(left < right){
            int temp = nums[left];
            nums[left] = nums[right];
            nums[right] = temp;
            left++;
            right++;
        }
    }
}

// Expected Answer: [1]
// Given Answer: [1]
// NOTE:  Though the previous solution is optimal & does return the expected results.
// It doesn't compile in the 'MAIN' , which, on LeetCode you don't get to edit. so instead I went
// with this solution: Same Results. 
class Solution {
public void rotate(int[] nums, int k) {
    if(k > nums.length) 
        k=k%nums.length;
 
    int[] result = new int[nums.length];
 
    for(int i=0; i < k; i++){
        result[i] = nums[nums.length-k+i];
    }
 
    int j=0;
    for(int i=k; i<nums.length; i++){
        result[i] = nums[j];
        j++;
    }
 
    System.arraycopy( result, 0, nums, 0, nums.length );
}
}
